import * as _chakra_ui_react from '@chakra-ui/react';
import { AlertProps, BadgeProps as BadgeProps$1, ButtonProps as ButtonProps$1, IconButtonProps as IconButtonProps$1, ResponsiveValue, ButtonGroupProps as ButtonGroupProps$1, CardProps, LinkProps as LinkProps$1, NumberInputProps, NumberInputFieldProps, NumberInputStepperProps, PinInputProps, PinInputFieldProps, ChakraProviderProps, InputProps, TabsProps as TabsProps$1 } from '@chakra-ui/react';
export { AbsoluteCenter, AbsoluteCenterProps, Accordion, AccordionButton, AccordionButtonProps, AccordionIcon, AccordionIconProps, AccordionItem, AccordionItemProps, AccordionPanel, AccordionPanelProps, AccordionProps, AlertDescription, AlertDescriptionProps, AlertDialog, AlertDialogBody, AlertDialogCloseButton, AlertDialogContent, AlertDialogFooter, AlertDialogHeader, AlertDialogOverlay, AlertIcon, AlertIconProps, AlertProps, AlertTitle, AlertTitleProps, AspectRatio, AspectRatioProps, Avatar, AvatarBadge, AvatarBadgeProps, AvatarGroup, AvatarGroupProps, AvatarProps, BadgeProps, Box, BoxProps, Breadcrumb, BreadcrumbItem, BreadcrumbItemProps, BreadcrumbLink, BreadcrumbLinkProps, BreadcrumbProps, BreadcrumbSeparator, BreadcrumbSeparatorProps, CardBody, CardBodyProps, CardFooter, CardFooterProps, CardHeader, CardHeaderProps, CardProps, Center, CenterProps, Checkbox, CheckboxGroup, CheckboxGroupProps, CheckboxProps, Circle, CircularProgress, CircularProgressLabel, CircularProgressProps, CloseButton, CloseButtonProps, Code, CodeProps, Collapse, CollapseProps, Container, ContainerProps, Divider, DividerProps, Drawer, DrawerBody, DrawerCloseButton, DrawerContent, DrawerContentProps, DrawerFooter, DrawerHeader, DrawerOverlay, DrawerProps, Editable, EditableInput, EditableInputProps, EditablePreview, EditablePreviewProps, EditableProps, EditableTextarea, EditableTextareaProps, Fade, FadeProps, Flex, FlexProps, Grid, GridItem, GridItemProps, GridProps, HStack, Heading, HeadingProps, Hide, HideProps, Highlight, HighlightProps, IconProps, Image, ImageProps, Input, InputAddon, InputAddonProps, InputGroup, InputGroupProps, InputLeftAddon, InputLeftAddonProps, InputLeftElement, InputLeftElementProps, InputProps, InputRightAddon, InputRightAddonProps, InputRightElement, InputRightElementProps, Kbd, KbdProps, LinkBox, LinkBoxProps, LinkOverlay, LinkOverlayProps, List, ListIcon, ListItem, ListItemProps, ListProps, Menu, MenuButton, MenuButtonProps, MenuDivider, MenuDividerProps, MenuGroup, MenuGroupProps, MenuItem, MenuItemOption, MenuItemOptionProps, MenuItemProps, MenuList, MenuListProps, MenuOptionGroup, MenuOptionGroupProps, MenuProps, Modal, ModalBody, ModalBodyProps, ModalCloseButton, ModalContent, ModalContentProps, ModalFooter, ModalFooterProps, ModalHeader, ModalHeaderProps, ModalOverlay, ModalOverlayProps, ModalProps, OrderedList, Popover, PopoverAnchor, PopoverArrow, PopoverArrowProps, PopoverBody, PopoverBodyProps, PopoverCloseButton, PopoverContent, PopoverContentProps, PopoverFooter, PopoverFooterProps, PopoverHeader, PopoverHeaderProps, PopoverProps, PopoverTrigger, Portal, PortalProps, Progress, ProgressProps, Radio, RadioGroup, RadioGroupProps, RadioProps, RangeSlider, RangeSliderFilledTrack, RangeSliderInnerTrackProps, RangeSliderMark, RangeSliderMarkProps, RangeSliderProps, RangeSliderThumb, RangeSliderThumbProps, RangeSliderTrack, RangeSliderTrackProps, ScaleFade, ScaleFadeProps, Select, SelectProps, Show, ShowProps, SimpleGrid, SimpleGridProps, Skeleton, SkeletonCircle, SkeletonProps, SkeletonText, SkeletonTextProps, Slide, SlideFade, SlideFadeProps, SlideProps, Slider, SliderFilledTrack, SliderInnerTrackProps, SliderMark, SliderMarkProps, SliderProps, SliderThumb, SliderThumbProps, SliderTrack, SliderTrackProps, Spacer, SpacerProps, Spinner, SpinnerProps, Square, SquareProps, Stack, StackDivider, StackDividerProps, StackProps, Stat, StatArrow, StatGroup, StatGroupProps, StatHelpText, StatHelpTextProps, StatLabel, StatLabelProps, StatNumber, StatNumberProps, StatProps, Step, StepDescription, StepDescriptionProps, StepIcon, StepIndicator, StepIndicatorProps, StepNumber, StepProps, StepSeparator, StepSeparatorProps, StepStatus, StepStatusProps, StepTitle, StepTitleProps, Stepper, StepperProps, Switch, SwitchProps, Tab, TabList, TabListProps, TabPanel, TabPanelProps, TabPanels, TabPanelsProps, TabProps, Table, TableBodyProps, TableCaption, TableCaptionProps, TableCellProps, TableColumnHeaderProps, TableContainer, TableContainerProps, TableFooterProps, TableHeadProps, TableProps, TableRowProps, Tag, TagCloseButton, TagCloseButtonProps, TagLabel, TagLabelProps, TagLeftIcon, TagProps, TagRightIcon, Tbody, Td, Text, TextProps, Textarea, TextareaProps, Tfoot, Th, Thead, Tooltip, TooltipProps, Tr, UnorderedList, UseControllableStateProps, UseDisclosureProps, UseDisclosureReturn, UseOutsideClickProps, UseStepsProps, UseToastOptions, VStack, VisuallyHidden, VisuallyHiddenInput, Wrap, WrapItem, WrapItemProps, WrapProps, extendTheme, forwardRef, useBoolean, useBreakpointValue, useClipboard, useConst, useControllableProp, useControllableState, useDimensions, useDisclosure, useMediaQuery, useMergeRefs, useOutsideClick, usePrefersReducedMotion, useSteps, useTheme, useToast, useToken, withDefaultColorScheme } from '@chakra-ui/react';
import { MaterialSymbol } from 'material-symbols';
export * from 'material-symbols';
export { MaterialSymbol } from 'material-symbols';
import * as _chakra_ui_system from '@chakra-ui/system';
import * as react_jsx_runtime from 'react/jsx-runtime';
export { SkipNavContent, SkipNavContentProps, SkipNavLink, SkipNavLinkProps } from '@chakra-ui/skip-nav';
import { InputProps as InputProps$1 } from '@kvib/react/src';
import { ChangeEvent, ReactNode, Ref } from 'react';
import { SelectInstance, GroupBase, FormatOptionLabelMeta, ActionMeta } from 'chakra-react-select';
export { ActionMeta } from 'chakra-react-select';
import { SizeProp, Variant } from 'chakra-react-select/dist/types/types';
import * as _internationalized_date from '@internationalized/date';
import { CalendarDateTime } from '@internationalized/date';
import { TimeValue } from '@react-types/datepicker';

declare const Alert: _chakra_ui_react.ComponentWithAs<"div", AlertProps>;

type BadgeProps = Omit<BadgeProps$1, "colorScheme"> & {
    /** The color of the badge.
     * @default gray
     */
    colorScheme?: "green" | "blue" | "red" | "gray";
};
declare const Badge: _chakra_ui_react.ComponentWithAs<"span", BadgeProps>;

type ButtonProps = Omit<ButtonProps$1, "variant" | "colorScheme" | "leftIcon" | "rightIcon" | "iconSpacing" | "isActive" | "loadingText" | "spinnerPlacement"> & {
    /**The visual color appearance of the component
     * @default green*/
    colorScheme?: "green" | "blue" | "gray" | "red";
    /**If added, the button will show an icon before the button's label.*/
    leftIcon?: MaterialSymbol;
    /**If added, the button will show an icon after the button's label.*/
    rightIcon?: MaterialSymbol;
    /**If true, the rightIcon/leftIcon in the button will be filled.
     * @default false */
    iconFill?: boolean;
    variant?: "primary" | "secondary" | "tertiary" | "ghost";
    /**Decides whether a screen reader will vocalize the icon name or not */
    iconAriaIsHidden?: boolean;
};
declare const Button: _chakra_ui_react.ComponentWithAs<"button", ButtonProps>;

type IconButtonProps = Omit<IconButtonProps$1, "colorScheme" | "variant" | "isActive" | "icon"> & {
    /**The variant of the IconButton
     * @default primary */
    variant?: "primary" | "secondary" | "tertiary" | "ghost";
    /**The icon to be used in the button.*/
    icon: MaterialSymbol;
    /**The visual color appearance of the component.
       @default green*/
    colorScheme?: "green" | "blue" | "gray" | "red";
    /**The size of the component.
     @default md*/
    size?: ResponsiveValue<string>;
    /**If true, the icon will be filled.
     @default false*/
    iconFill?: boolean;
};
declare const IconButton: _chakra_ui_react.ComponentWithAs<"button", IconButtonProps>;

type ButtonGroupProps = Omit<ButtonGroupProps$1, "colorScheme"> & {
    /**The visual color appearance of the component
     * @default green*/
    colorScheme?: "green" | "blue" | "gray" | "red";
};
declare const ButtonGroup: _chakra_ui_react.ComponentWithAs<"div", ButtonGroupProps>;

declare const Card: _chakra_ui_react.ComponentWithAs<"div", CardProps>;

interface FormControlProps {
    /**
     * If `true`, the form control will be required. This has 2 side effects:
     * - The `FormLabel` will show a required indicator
     * - The form element (e.g, Input) will have `aria-required` set to `true`
     *
     * @default false
     */
    isRequired?: boolean;
    /**
     * If `true`, the form control will be disabled. This has 2 side effects:
     * - The `FormLabel` will have `data-disabled` attribute
     * - The form element (e.g, Input) will be disabled
     *
     * @default false
     */
    isDisabled?: boolean;
    /**
     * If `true`, the form control will be invalid. This has 2 side effects:
     * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`
     * - The form element (e.g, Input) will have `aria-invalid` set to `true`
     *
     * @default false
     */
    isInvalid?: boolean;
    /**
     * If `true`, the form control will be readonly
     *
     * @default false
     */
    isReadOnly?: boolean;
}
declare const FormControl: _chakra_ui_react.ComponentWithAs<"div", FormControlProps>;

interface FormLabelProps extends FormControlProps {
    /**
     * Label for the form component
     *
     * @default "label"
     */
    label?: string;
    /**
     * @type React.ReactElement
     */
    requiredIndicator?: React.ReactElement;
    /**
     * @type React.ReactNode
     */
    optionalIndicator?: React.ReactNode;
}
declare const FormLabel: _chakra_ui_react.ComponentWithAs<"label", FormLabelProps>;

interface FormHelperTextProps extends FormControlProps {
    /**
     * HelperText for component
     *
     * @default helperText
     */
    helperText?: string;
}
declare const FormHelperText: _chakra_ui_react.ComponentWithAs<"div", FormHelperTextProps>;

interface FormErrorMessageProps extends FormControlProps {
    /**
     * errorMessage for component
     *
     * @default errorMessage
     */
    errorMessage?: string;
}
declare const FormErrorMessage: _chakra_ui_react.ComponentWithAs<"div", FormErrorMessageProps>;

type IconProps = {
    /**The icon from Material symbols you want to display*/
    icon: MaterialSymbol;
    /**The font size of the icon */
    size?: 20 | 24 | 40 | 48 | number;
    /**The color of the icon*/
    color?: string;
    /**The weight of the icon*/
    weight?: 100 | 200 | 300 | 400 | 500 | 600 | 700;
    /**The of grade the icon*/
    grade?: -25 | 0 | 200;
    /**Decides whether the icon is filled or not*/
    isFilled?: boolean;
    /**Decides whether a screen reader will vocalize the icon name or not */
    ariaIsHidden?: boolean;
    className?: string;
};
declare const Icon: _chakra_ui_system.ComponentWithAs<"span", IconProps>;

type LinkProps = Omit<LinkProps$1, "colorScheme" | "variant"> & {
    /** The color of the link.
     * @default green
     */
    colorScheme?: "green" | "blue";
};
/** Link to different sites or parts of site
 *
 * You can specify the `color` prop to get different link designs.
 */
declare const Link: _chakra_ui_react.ComponentWithAs<"a", LinkProps>;

declare const NumberInput: _chakra_ui_react.ComponentWithAs<"div", NumberInputProps>;

declare const NumberInputField: _chakra_ui_react.ComponentWithAs<"input", NumberInputFieldProps>;

declare const NumberInputStepper: _chakra_ui_react.ComponentWithAs<"input", NumberInputStepperProps>;

declare const PinInput: ({ size, children, ...props }: PinInputProps) => react_jsx_runtime.JSX.Element;

declare const PinInputField: _chakra_ui_react.ComponentWithAs<"input", PinInputFieldProps>;

/**
 * KVIBProvider er komponenten som gir de andre komponentene riktig tema og stil
 * Den må settes inn i prosjektet KVIB skal brukes, så nærme rotkomponenten som mulig.
 */
declare const KvibProvider: ({ theme, children, ...props }: ChakraProviderProps) => react_jsx_runtime.JSX.Element;

type SearchProps = Omit<InputProps, "isRequired" | "colorScheme"> & {
    searchButton?: "left" | "right" | "none";
    colorScheme?: "gray" | "red" | "green" | "blue" | undefined;
    buttonVariant?: "primary" | "secondary" | "tertiary" | "ghost";
    buttonWidth?: string;
    buttonText?: string;
};
declare const Search: _chakra_ui_react.ComponentWithAs<"input", SearchProps>;

type TabsProps = Omit<TabsProps$1, "colorScheme" | "size"> & {
    /**The visual color appearance of the tabs*/
    colorScheme?: "green" | "blue";
    /**The size of the tabs*/
    size: "sm" | "md" | "lg";
};
declare const Tabs: _chakra_ui_react.ComponentWithAs<"div", TabsProps>;

declare const defaultKvibTheme: Record<string, any>;

type DatepickerProps = Omit<InputProps$1, "colorScheme" | "max" | "min" | "defaultValue"> & {
    /**
     * A default date to be selected when the picker is displayed.
     */
    defaultSelected?: Date;
    /**
     * The month to display in the calendar by default.
     */
    defaultMonth?: Date;
    /**
     * The earliest date available for selection.
     */
    fromDate?: Date;
    /**
     * The latest date available for selection.
     */
    toDate?: Date;
    /**
     * Whether or not to show dropdowns for month and year selection.
     */
    showDropdownMonthYear?: boolean;
    /**
     * If set to true, navigation buttons (next/previous month) are hidden.
     */
    disableNavigation?: boolean;
    /**
     * Whether or not to show the days that fall outside the current month.
     */
    showOutsideDays?: boolean;
    /**
     * Whether or not to display the week numbers.
     */
    showWeekNumber?: boolean;
    /**
     * A list of dates that should be disabled for selection.
     */
    disabledDays?: Date[];
    /**
     * Whether or not to use the native datepicker on mobile devices.
     */
    useNative?: boolean;
    /**
     * Sideeffect to be run when a date is selected.
     */
    onChange?: (event: ChangeEvent<HTMLInputElement>) => void;
    /**
     * Whether or not the input is disabled.
     */
    isDisabled?: boolean;
    /**
     * Whether or not the input is invalid.
     */
    isInvalid?: boolean;
    /**
     * Whether or not the input is required.
     */
    isRequired?: boolean;
    /**
     * The colorScheme for the Datepicker.
     */
    colorScheme?: "blue" | "green";
};
declare const Datepicker: _chakra_ui_react.ComponentWithAs<"input", DatepickerProps>;

declare const FileUpload: _chakra_ui_react.ComponentWithAs<"input", InputProps>;

type LogoProps = {
    /** The variant of the logo
     * @default "vertical"*/
    variant?: "vertical" | "horizontal";
    /** The size of the logo. Width in pixels.
     * @default 184/125*/
    size?: number;
    /** Aria-label for the logo.
     * @default "logo"*/
    label?: string;
};
declare const Logo: ({ variant, size, label }: LogoProps) => react_jsx_runtime.JSX.Element;

type SearchAsyncElement<T> = SelectInstance<T, boolean, GroupBase<T>>;
type BaseProps<T> = {
    /** Function to fetch/select options based on input. */
    loadOptions: (inputValue: string, callback: (options: T[]) => void) => void;
    /** Placeholder text for the input field. */
    placeholder?: string;
    /** Determines if the input is focused on mount. */
    autoFocus?: boolean;
    /** Time delay (ms) before invoking `loadOptions`. */
    debounceTime?: number;
    /** Additional CSS class for the component. */
    className?: string;
    /** Allows a clear button in the input. */
    isClearable?: boolean;
    /** Custom JSX for the dropdown indicator. */
    dropdownIndicator?: JSX.Element;
    /** Size of the input (e.g., "small", "medium"). */
    size?: SizeProp;
    /** Default options shown when no input is given. If true, all options will be shown. */
    defaultOptions?: T[] | boolean;
    /** Visual style variant of the input. */
    variant?: Variant;
    /** Id set to the SelectContainer component */
    id?: string;
    /** Determines if the input is disabled */
    isDisabled?: boolean;
    /** Determines the color of the border when focused. Use color keys in `theme.colors`. */
    focusBorderColor?: string;
    /** Function to map inputValue to a text output when no options are loaded */
    noOptionsMessage?: ((obj: {
        inputValue: string;
    }) => ReactNode) | undefined;
    /** Variable to override the selected value of the component. Null resets the component and undefined  is ignored. When in use update value from the onChange function */
    value?: T | null;
    /** Function for formatting the labels in the dropdown menu */
    optionLabelFormatter?: (data: T, formatOptionLabelMeta: FormatOptionLabelMeta<T>) => ReactNode;
    /** Reference to the instance of the select element. Note that this is not a default HTMLSelectElement, but a class from the react-select package. As such, the
     * type must be imported from KVIB.
     */
    ref?: Ref<SearchAsyncElement<T>>;
};
type WithMulti<T> = {
    /** Determines if it is possible to choose several values. */
    isMulti: true;
    /** Callback for when the selection changes. If `isMulti=true` the type is `(newValue: readonly T[] | null, actionMeta: ActionMeta<T>) => void` */
    onChange: (newValue: readonly T[] | null, actionMeta: ActionMeta<T>) => void;
};
type WithoutMulti<T> = {
    isMulti?: false;
    /** If `isMulti=false`, the type is `(newValue: T | null) => void` */
    onChange: (newValue: T | null) => void;
};
type SearchAsyncProps<T> = BaseProps<T> & (WithMulti<T> | WithoutMulti<T>);
declare const SearchAsync: <T extends unknown>(props: SearchAsyncProps<T>, ref: Ref<SelectInstance<T, boolean, GroupBase<T>>>) => React.ReactNode;

type FooterProps = {
    accessibilityUrl?: string;
    excludeSocialMedia?: boolean;
    excludeOpeningHours?: boolean;
    excludeContactInfo?: boolean;
    excludeHelp?: boolean;
    excludeNews?: boolean;
    /**The contact info email-adress
     * @default post@kartverket.no*/
    contactInfoEmailAddress?: string;
};
declare const Footer: ({ accessibilityUrl, excludeContactInfo, excludeOpeningHours, excludeHelp, excludeNews, excludeSocialMedia, contactInfoEmailAddress, }: FooterProps) => react_jsx_runtime.JSX.Element;

type HeaderProps = {
    /** Determines where the content in the header is displayed. */
    justifyContent?: "space-between" | "center" | "start";
    /** Href for logo link */
    logoLink?: string;
    /** Alt Text for logo */
    logoAltText?: string;
    /** Children to be displayed in the header. */
    children?: React.ReactNode;
    /** If true, a menu button will be displayed. */
    showMenuButton?: boolean;
    /** If true, the header children will be displayed in the dropdown menu. */
    showChildrenInMenu?: boolean;
    /** Custom children to be displayed in the dropdown menu. Also to modify dropdown layout. */
    dropdownMenuChildren?: React.ReactNode;
    /** Screen breakpoint for when the header should collapse and display menu button instead. */
    collapseBreakpoint?: "sm" | "md" | "lg";
    /** If provided: a custom function to be called when the menu button is clicked. */
    onMenuButtonClick?: React.MouseEventHandler<HTMLButtonElement>;
    /** Gap between header elements. */
    gap?: number;
    logoVariant?: "horizontal" | "vertical";
};
declare const Header: (props: HeaderProps) => react_jsx_runtime.JSX.Element;

type FooterInlineProps = {
    logoLink?: string;
    accessibilityUrl?: string;
    /**The contact info email-adress
     * @default https://kartverket.no/om-kartverket/personvern*/
    privacyUrl?: string;
    children?: React.ReactNode;
};
declare const FooterInline: ({ logoLink, accessibilityUrl, privacyUrl, children, }: FooterInlineProps) => react_jsx_runtime.JSX.Element;

type TimepickerProps = {
    size?: "xs" | "sm" | "md" | "lg";
    width?: "fit-content" | "full";
    variant?: "outline" | "filled" | "flushed" | "unstyled";
    colorScheme?: "green" | "blue";
    value?: TimeValue;
    defaultValue?: TimeValue;
    onChange?: (value: TimeValue) => void;
    isDisabled?: boolean;
    isInvalid?: boolean;
    minuteInterval?: number;
    ariaLabel?: string;
};
declare const Timepicker: ({ size, width, variant, colorScheme, value, defaultValue, onChange, isDisabled: isDisabledExternally, isInvalid: isInvalidExternally, minuteInterval, ariaLabel, }: TimepickerProps) => react_jsx_runtime.JSX.Element;
declare const getCurrentTime: () => _internationalized_date.Time;
declare const getTimestampFromTime: (time: CalendarDateTime | null) => string;

export { Alert, Badge, type BaseProps, Button, ButtonGroup, type ButtonGroupProps, type ButtonProps, Card, Datepicker, type DatepickerProps, FileUpload, Footer, FooterInline, type FooterProps, FormControl, type FormControlProps, FormErrorMessage, type FormErrorMessageProps, FormHelperText, type FormHelperTextProps, FormLabel, type FormLabelProps, Header, Icon, IconButton, type IconButtonProps, KvibProvider, Link, type LinkProps, Logo, type LogoProps, NumberInput, NumberInputField, NumberInputStepper, PinInput, PinInputField, Search, SearchAsync, type SearchAsyncElement, type SearchAsyncProps, type SearchProps, Tabs, type TabsProps, Timepicker, defaultKvibTheme, getCurrentTime, getTimestampFromTime };
